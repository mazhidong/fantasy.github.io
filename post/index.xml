<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fantasy Blogs</title>
    <link>https://mazhidong.github.io/post/</link>
    <description>Recent content in Posts on Fantasy Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 12 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mazhidong.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>系统同步RTC失败</title>
      <link>https://mazhidong.github.io/post/kernel/2018-11-12_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5rtc%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/kernel/2018-11-12_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5rtc%E5%A4%B1%E8%B4%A5/</guid>
      <description>问题描述 开机设置正确时间后，重启机器，时间仍为RTC中原始值，也就是说正确的时间并没有设置到RTC中，而RTC一直走着一个错误的时间，并在开</description>
    </item>
    
    <item>
      <title>Android.mk 文件语法详解</title>
      <link>https://mazhidong.github.io/post/jni/2018-10-08-android.mk%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/jni/2018-10-08-android.mk%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>0. Android.mk简介： Android.mk文件用来告知NDK Build 系统关于Source的信息。 Android.mk将是GNU Makefil</description>
    </item>
    
    <item>
      <title>CMake 入门实战</title>
      <link>https://mazhidong.github.io/post/jni/2018-10-08-cmake%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/jni/2018-10-08-cmake%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</guid>
      <description>什么是 CMake 1 2 All problems in computer science can be solved by another level of indirection. David Wheeler 你或许听过好几种 Make 工具，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Ma</description>
    </item>
    
    <item>
      <title>String[] 转char* argv[]</title>
      <link>https://mazhidong.github.io/post/jni/2018-10-08-string-%E8%BD%ACchar-argv/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/jni/2018-10-08-string-%E8%BD%ACchar-argv/</guid>
      <description>代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* * Class: com_ema_testlib_infrastructure_demo_JNITools * Method: uartTest * Signature: ([Ljava/lang/String;)I */ JNIEXPORT jint JNICALL Java_com_ema_testlib_infrastructure_demo_JNITools_uartTest (JNIEnv *env, jobject, jobjectArray jargv) { int argc = env-&amp;gt;GetArrayLength(jargv); typedef char *pchar; pchar *argv =</description>
    </item>
    
    <item>
      <title>VS-RK3399 and VS-RK3288 Audio 开发指南</title>
      <link>https://mazhidong.github.io/post/aosp/2018-09-20-vs-rk3399-and-vs-rk3288-audio-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/aosp/2018-09-20-vs-rk3399-and-vs-rk3288-audio-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</guid>
      <description>1 概论 1.1 概述 本章主要描述Audio的相关的概念、代码结构。 1.2 概念 CPU DAI:主控端的Audio Data Interface，比如I2S,Spdif,P</description>
    </item>
    
    <item>
      <title>onActivityResult执行时机</title>
      <link>https://mazhidong.github.io/post/android/2018-09-12-onactivityresult%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/android/2018-09-12-onactivityresult%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>前言 前两天遇到了个onActivityResult执行时机错误的问题，在解决过程中学习了些onActivityResult与setResul</description>
    </item>
    
    <item>
      <title>dialog隐藏虚拟按键</title>
      <link>https://mazhidong.github.io/post/android/2018-09-11-dialog%E9%9A%90%E8%97%8F%E8%99%9A%E6%8B%9F%E6%8C%89%E9%94%AE/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/android/2018-09-11-dialog%E9%9A%90%E8%97%8F%E8%99%9A%E6%8B%9F%E6%8C%89%E9%94%AE/</guid>
      <description>Android 部分机型没有物理按键，只有虚拟按键，Activity全屏方法如下： 在 1 setContentView(R.layout.activity_main); 之前添加 1 getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION); 当用户划出虚拟按键后，自动再隐藏方法如下： 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>android 多module打包aar</title>
      <link>https://mazhidong.github.io/post/android/2018-08-24-android_%E5%A4%9Amodule%E6%89%93%E5%8C%85aar/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/android/2018-08-24-android_%E5%A4%9Amodule%E6%89%93%E5%8C%85aar/</guid>
      <description>一、打包 aar 1、单个模块打包 打开 Gradle 工具窗口,找到 Android Library 模块. 在 build 任务中双击 assemble. 执行成功后，在 mylibrary/build/outputs/aar 目录下找到 aar 包. 默认 Debug 和 Release 的 AAR 包都会打出来,当然你也</description>
    </item>
    
    <item>
      <title>android 单例模式</title>
      <link>https://mazhidong.github.io/post/android/2018-08-17-android%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/android/2018-08-17-android%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>tip 单例模式的实现方式有懒汉，饿汉，双重校验锁，枚举，内部类等等，写法就不全部列举了。Android源码中一个单例辅助类/frameworks</description>
    </item>
    
    <item>
      <title>exchange-extsd-and-sdcard</title>
      <link>https://mazhidong.github.io/post/aosp/2018-08-15-exchange-extsd-and-sdcard/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/aosp/2018-08-15-exchange-extsd-and-sdcard/</guid>
      <description>系统环境 Android 4.4.2 问题描述 交换内外SD卡挂载路径 patch MediaScannerReceiver 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47</description>
    </item>
    
    <item>
      <title>android framework之旅（四）去除Usb权限弹窗</title>
      <link>https://mazhidong.github.io/post/aosp/2018-08-07-android_framework%E4%B9%8B%E6%97%85%E5%9B%9B%E5%8E%BB%E9%99%A4usb%E6%9D%83%E9%99%90%E5%BC%B9%E7%AA%97/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/aosp/2018-08-07-android_framework%E4%B9%8B%E6%97%85%E5%9B%9B%E5%8E%BB%E9%99%A4usb%E6%9D%83%E9%99%90%E5%BC%B9%E7%AA%97/</guid>
      <description>终于配置、下载、编译、刷机各种环节均已打通，回归到自己的初始目标，去除每次重启插入usb后的权限弹窗提示。 环境 源码版本：5.1.1 修改 我们打</description>
    </item>
    
    <item>
      <title>Java：类与继承</title>
      <link>https://mazhidong.github.io/post/java/2018-07-25-java%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/java/2018-07-25-java%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>Java：类与继承 对于面向对象的程序设计语言来说，类毫无疑问是其最重要的基础。抽象、封装、继承、多态这四大特性都离不开类，只有存在类，才能体</description>
    </item>
    
    <item>
      <title>Java8中Map的遍历方式总结&#34;</title>
      <link>https://mazhidong.github.io/post/java/2018-07-20-java8%E4%B8%ADmap%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/java/2018-07-20-java8%E4%B8%ADmap%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>java反射获取方法以及调用方法&#34;</title>
      <link>https://mazhidong.github.io/post/java/2018-07-20-java%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/java/2018-07-20-java%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>Java反射获取方法以及调用方法 获取方法 先找到方法所在类的字节码 找到需要被获取的方法 Class类中获取方法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //</description>
    </item>
    
    <item>
      <title>Java语言中几个常用的包&#34;</title>
      <link>https://mazhidong.github.io/post/java/2018-07-12-java%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%85/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/java/2018-07-12-java%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%85/</guid>
      <description>概述 Java采用包结构来组织和管理类和接口文件。本文介绍Java语言类库中几个常用的包，因为这几个包在软件开发与应用中经常需要用到，其中有些</description>
    </item>
    
    <item>
      <title>android_dhcp</title>
      <link>https://mazhidong.github.io/post/aosp/2018-07-03-android_dhcp/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/aosp/2018-07-03-android_dhcp/</guid>
      <description>系统环境 Android 4.0.3 问题描述 dhcp的时候一直停留在获取ip地址 设置静态IP能正常使用 获取ip地址 一直返回超时 dhcp.wlan0.result = &amp;ldquo;&amp;rdquo; 问题解决 /system/etc/dhcpcd/dhcpcd-run-hooks 需要添加执行权限 chmod 755 /system/etc/dhcpcd/dhcpcd-run-hooks</description>
    </item>
    
    <item>
      <title>使用Docker编译Android系统源码</title>
      <link>https://mazhidong.github.io/post/docker/2018-06-22-%E4%BD%BF%E7%94%A8docker%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/docker/2018-06-22-%E4%BD%BF%E7%94%A8docker%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/</guid>
      <description>引言： 最近公司业务转型，开始倒腾起安卓系统，做了几个月的安卓APP开发，最近又需要做系统定制，所以撸起袖子搞起… 首先干嘛？部署开发环境，开发</description>
    </item>
    
    <item>
      <title>Ffmpeg选项详解</title>
      <link>https://mazhidong.github.io/post/linux/2018-06-19-ffmpeg%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/linux/2018-06-19-ffmpeg%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3/</guid>
      <description>Ffmpeg快速命令使用 Ffmpeg使用语法 1 ffmpeg [[options][`-i&amp;#39; input_file]]... {[options] output_file}... 如果没有输入文件，那么视音频捕捉（只在Linux下有效，因为Linux下把音视频设备</description>
    </item>
    
    <item>
      <title>bootanimation支持播放MP4</title>
      <link>https://mazhidong.github.io/post/aosp/2018-06-19-bootanimation%E6%94%AF%E6%8C%81%E6%92%AD%E6%94%BEmp4/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/aosp/2018-06-19-bootanimation%E6%94%AF%E6%8C%81%E6%92%AD%E6%94%BEmp4/</guid>
      <description>系统环境 Android API 15 视频生成 1 ffmpeg -f image2 -r 15 -i %*.png -vcodec mpeg4 bootanimation.mp4 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46</description>
    </item>
    
    <item>
      <title>ffmpeg使用参数的中文说明</title>
      <link>https://mazhidong.github.io/post/linux/2018-06-19-ffmpeg%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mazhidong.github.io/post/linux/2018-06-19-ffmpeg%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E/</guid>
      <description>视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4</description>
    </item>
    
  </channel>
</rss>